var structure = (function() {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      function stringEscape(s) {
        function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

        return s
          .replace(/\\/g,   '\\\\')
          .replace(/"/g,    '\\"')
          .replace(/\x08/g, '\\b')
          .replace(/\t/g,   '\\t')
          .replace(/\n/g,   '\\n')
          .replace(/\f/g,   '\\f')
          .replace(/\r/g,   '\\r')
          .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
          .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
          .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
      }

      var expectedDesc, foundDesc;

      switch (expected.length) {
        case 0:
          expectedDesc = "end of input";
          break;

        case 1:
          expectedDesc = expected[0];
          break;

        default:
          expectedDesc = expected.slice(0, -1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }

      foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

      return "Expected " + expectedDesc + " but " + foundDesc + " found.";
    }

    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
    this.message  = buildMessage(expected, found);
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$startRuleFunctions = { main: peg$parsemain },
        peg$startRuleFunction  = peg$parsemain,

        peg$c0 = null,
        peg$c1 = function(structure) {
        	var default_packing = "bottom",
        		default_endian = "little",
        		bottomup = ((structure.packing || default_packing) === "bottom"),
        		top_level;

        	// This is currently only little endian
        	function readBits(little, bits, byteAddress, bitOffset) {
        		var ba = byteAddress,
        			o = ["var v = 0;"],
        			q = 8 - bitOffset;

        		function top(bits) {
        			return "this.$u8[" + ba + "] >>" + (8 - bits);
        		}

        		function bottom(bits) {
        			return "this.$u8[" + ba + "] & " + ((1 << bits) - 1);
        		}

        		function shift(s, a) {
        			if (a == 0) return s;
        			return "(" + s + ") << " + a;
        		}

        		// If we can pack this into one byte
        		if (q >= bits) {
        			var m = (1 << bits) - 1,
        				s = bottomup ? bitOffset : (8 - bitOffset - bits);

        			o.push("v = (this.$u8[" + ba + "] >> ", s, ") & ", m, ";");
        		} else if (little) {
        			var l = bits,
        				s = 0;
        				
        			if (bitOffset) {
        				s = q;
        				o.push("v = ", (bottomup ? top : bottom)(q), ";");
        				l -= s;
        				ba++;
        			}

        			while (l >= 8) {
        				o.push("v |= ", shift("this.$u8[" + (ba++) + "]", s), ";");
        				s += 8;
        				l -= 8;
        			}

        			if (l > 0) {
        				o.push("v |= ", shift((bottomup ? bottom : top)(l),s), ";");
        			}
        		} else {
        			var s = bits,
        				l = bits;

        			if (bitOffset) {
        				s -= q;
        				o.push("v = ", shift((bottomup ? top : bottom)(q),s), ";");
        				l -= q;
        				ba++;
        			}

        			while (l >= 8) {
        				s -= 8;
        				l -= 8;
        				o.push("v |= this.$u8[", ba++, "] << ", s, ";");
        			}

        			if (l > 0) {
        				o.push("v |= ", (bottomup ? bottom : top)(l), ";");
        			}
        		}

        		return o.join('');
        	}

        	// This is currently only little endian
        	function writeBits(little, bits, byteAddress, bitOffset) {
        		var mask = (bits == 32) ? 0xFFFFFFFF : ((1 << bits) - 1),
        			ba = byteAddress,
        			o = [],
        			q = 8 - bitOffset;

        		function top(bits, v) {
        			var mask = 0xFF >> bits;

        			return "(this.$u8[" + ba + "] & " + mask + ") | "
        				 + "((" + v + " << " + (8-bits) + ") & " + ~mask + ");";
        		}

        		function bottom(bits, v) {
        			var mask = (0xFF << bits) & 0xFF;

        			return "(this.$u8[" + ba + "] & " + mask + ") | (" + v + " & " + ~mask + ");";
        		}

        		function shift(v, a) {
        			if (a) { return "(" + v + " >> " + a + ")"; }
        			return v;
        		}

        		if (q >= bits) {
        			var s = bottomup ? bitOffset : (8 - bitOffset - bits),
        				m = ((1 << bits) - 1) << s;

        			o.push("this.$u8[" + ba + "]  = (this.$u8[" + ba + "] & ", ~m, ") | ((v << ",s,") & ", m,");");
        		} else if (little) {
        			var l = bits,
        				s = 0;

        			if (bitOffset) {
        				o.push("this.$u8[",ba,"] = ", (bottomup ? top : bottom)(q, "v"));
        				s = q;
        				l -= s;
        				ba++;
        			}

        			while (l >= 8) {
        				o.push("this.$u8[",ba++,"] = v >> ", s, ";");
        				s += 8;
        				l -= 8;
        			}

        			if (l > 0) {
        				o.push("this.$u8[",ba,"] = ", (bottomup ? bottom : top)(l, shift("v", s)));
        			}
        		} else {
        			var l = bits,
        				s = bits;

        			if (bitOffset) {
        				l -= q;
        				s -= q;

        				o.push("this.$u8[",ba,"] = ", (bottomup ? top : bottom)(q, shift("v", s)));

        				ba++;
        			}

        			while (l >= 8) {
        				s -= 8;
        				l -= 8;
        				o.push("this.$u8[", ba++, "] = v >> ", s, ";");
        			}

        			if (l > 0) {
        				t = (1 << l) - 1;
        				o.push("this.$u8[",ba,"] = ", (bottomup ? bottom : top)(l, "v"));
        			}
        		}
        	
        		return o.join('');
        	}

        	function unsigned(little, bits, byteAddress, bitOffset) {
        		var r = readBits(little, bits, byteAddress, bitOffset),
        			w = writeBits(little, bits, byteAddress, bitOffset);

        		if (bits === 32) {
        			r += "return (v & 0x80000000) ? (v + 0x100000000) : v;";
        		} else {
        			r += "return v;"
        		}

        		return {
        			get: new Function(r),
        			set: new Function("v", w)
        		};
        	}

        	function signed(little, bits, byteAddress, bitOffset) {
        		var r = readBits(little, bits, byteAddress, bitOffset),
        			w = writeBits(little, bits, byteAddress, bitOffset);

        		if (bits !== 32) {
        		 	r += "return v << " + (32 - bits) + " >> " + (32 - bits) + ";";
        		} else {
        			r += "return v;";
        		}

        		return {
        			get: new Function(r),
        			set: new Function("v", w)
        		};
        	}

        	function float(little, bits, byteAddress, bitOffset) {
        		var rl, rh, wl, wh; 
        		
        		if (little || bits != 64) {
        			rl = readBits(little, 32, byteAddress, bitOffset),
        			wl = writeBits(little, 32, byteAddress, bitOffset),
        			rh = readBits(little, 32, byteAddress + 4, bitOffset), 
        			wh = writeBits(little, 32, byteAddress + 4, bitOffset);
        		} else {
        			rh = readBits(little, 32, byteAddress, bitOffset),
        			wh = writeBits(little, 32, byteAddress, bitOffset),
        			rl = readBits(little, 32, byteAddress + 4, bitOffset), 
        			wl = writeBits(little, 32, byteAddress + 4, bitOffset);
        		}

        		switch (bits) {
        			case 32:
        				return {
        					get: new Function(rl + "this._tdv.setUint32(0, v); return this._tdv.getFloat32(0)"),
        					set: new Function("v", "this._tdv.setFloat32(0, v); v = this._tdv.getUint32(0);" + wl)
        				};
        			case 64:
        				return {
        					get: new Function(rh + "this._tdv.setUint32(0, v);" + rl + "this._tdv.setUint32(4, v);" + "return this._tdv.getFloat64(0)"),
        					set: new Function("v", "this._tdv.setFloat64(0, v); v = this._tdv.getUint32(0);" + wh + "v = this._tdv.getUint32(4);" + wl)
        				};
        		}
        	}

        	// === Prototype generators ========
        	var _globals = {
        		_tdv: new DataView(new ArrayBuffer(8))
        	};

        	function globals() {
        		return Object.create(_globals);
        	}

        	function accessor(accessors, field, offset, index) {
        		var byteAddr = Math.floor(offset / 8),
        			bitAddr = offset % 8,
        			littleEndian, def, simple;

        		littleEndian = ((field.endian || structure.endian || default_endian) === "little");

        		switch (field.type) {
        		case 'unsigned':
        			def = unsigned(littleEndian, field.size, byteAddr, bitAddr);
        			simple = true;
        			break ;
        		case 'signed':
        			def = signed(littleEndian, field.size, byteAddr, bitAddr);
        			simple = true;
        			break ;
        		case 'float':
        			def = float(littleEndian, field.size, byteAddr, bitAddr);
        			simple = true;
        			break ;
        		case 'struct':
        			def = { writable: true, value: struct(field, offset) };
        			simple = false;
        			break ;
        		case 'array':
        			def = { writable: true, value: array(field, offset) };
        			simple = false;
        			break ;
        		case 'void':
        			return true;
        		default:
        			throw new Error("Unknown filed type: " + field.type);
        		}

        		Object.defineProperty(accessors, (index !== undefined) ? index : field.name, def);
        		return simple;
        	}

        	function struct(field, offset) {
        		var accessors = globals(),
        			chain = ["this.$u8 = u8;"];

        		field.fields.forEach(function (field) {
        			var simple = accessor(accessors, field, field.offset + offset);

        			if (!simple) { chain.push("this.", field.name, " = new this.", field.name, "(u8);"); }
        		});

        		Object.defineProperty(accessors, "_size", { value: Math.ceil(field.size / 8) });

        		var f = new Function("u8", chain.join(""))
        		f.prototype = accessors;

        		return f;
        	}

        	function array(field, offset) {
        		var accessors = globals(),
        			chain = ["this.$u8 = u8;"];

        		for (var i = 0; i < field.count; i++) {
        			var simple = accessor(accessors, field.field, offset + field.field.size * i, i);

        			if (!simple) { chain.push("this[", i, "] = new this[", i, "](u8);"); }
        		}

        		Object.defineProperty(accessors, "_size", { value: Math.ceil(field.field.size * field.count / 8) });

        		var f = new Function("u8", chain.join(""))
        		f.prototype = accessors;

        		return f;
        	}

        	// Return lazy constructor for structures
        	return function (data, offset) {
        		var bytes = Math.ceil(structure.size / 8);
        		
        		if (!top_level) { top_level = struct(structure, 0); }

        		if (!data) {
        			data = new ArrayBuffer(bytes);
        		} else if (data.byteLength < bytes) {
        			throw new Error("ArrayBuffer is below minimum length");
        		}

        		var u8 = new Uint8Array(data, offset || 0),
        			s = new top_level(u8);

        		s._data = data;

        		return s;
        	};
        },
        peg$c2 = "",
        peg$c3 = "union",
        peg$c4 = "\"union\"",
        peg$c5 = function(p, e, f) { return { packing: p, endian: e, fields: f, size: f.size }; },
        peg$c6 = "top",
        peg$c7 = "\"top\"",
        peg$c8 = function() { return "top"; },
        peg$c9 = "bottom",
        peg$c10 = "\"bottom\"",
        peg$c11 = function() { return "bottom"; },
        peg$c12 = "big",
        peg$c13 = "\"big\"",
        peg$c14 = function() { return "big"; },
        peg$c15 = "little",
        peg$c16 = "\"little\"",
        peg$c17 = function() { return "little"; },
        peg$c18 = "{",
        peg$c19 = "\"{\"",
        peg$c20 = [],
        peg$c21 = "}",
        peg$c22 = "\"}\"",
        peg$c23 = function(f) {
        			f.size = f.reduce(function (offset, field) {
        				field.offset = offset;
        				return offset + field.size;
        			}, 0);

        			return f;
        		},
        peg$c24 = function(f) {
        			f.size = f.reduce(function (size, field) {
        				field.offset = 0;
        				return Math.max(size, field.size);
        			}, 0);

        			return f;
        		},
        peg$c25 = "signed",
        peg$c26 = "\"signed\"",
        peg$c27 = ":",
        peg$c28 = "\":\"",
        peg$c29 = function(e, bits, n) {
        			if (bits > 32) throw new Error("Integer fields may not exceed 32 bits") ;
        			
        			return { type: "signed", endian: e, name: n, size: bits };
        		},
        peg$c30 = "unsigned",
        peg$c31 = "\"unsigned\"",
        peg$c32 = function(e, bits, n) {
        			if (bits > 32) throw new Error("Integer fields may not exceed 32 bits") ;
        			
        			return { type: "unsigned", endian: e, name: n, size: bits };
        		},
        peg$c33 = "float",
        peg$c34 = "\"float\"",
        peg$c35 = function(e, bits, n) {
        			if (bits != 64 && bits != 32) throw new Error("IEEE Floating point may only be 32 and 64 bit") ;

        			return { type: "float", endian: e, name: n, size: bits };
        		},
        peg$c36 = "void",
        peg$c37 = "\"void\"",
        peg$c38 = function(bits) {
        			return { type: "void", size: bits };
        		},
        peg$c39 = function(n, f) { 
        			return { type: "struct", name: n, fields: f, size: f.size };
        		},
        peg$c40 = "struct",
        peg$c41 = "\"struct\"",
        peg$c42 = function(n, f) {
        			return { type: "struct", name: n, fields: f, size: f.size };
        		},
        peg$c43 = "[",
        peg$c44 = "\"[\"",
        peg$c45 = "]",
        peg$c46 = "\"]\"",
        peg$c47 = function(f, s) {return s; },
        peg$c48 = ";",
        peg$c49 = "\";\"",
        peg$c50 = function(f, s) {
        			return s.reverse().reduce(function (f, s) {
        				return { type: "array", name: f.name, count: s, field: f, size: f.size * s };
        			}, f);
        		},
        peg$c51 = function(f) { return f; },
        peg$c52 = /^[a-z_]/,
        peg$c53 = "[a-z_]",
        peg$c54 = /^[a-z0-9_]/,
        peg$c55 = "[a-z0-9_]",
        peg$c56 = function(a, b) { return a + b.join(''); },
        peg$c57 = /^[1-9]/,
        peg$c58 = "[1-9]",
        peg$c59 = /^[0-9]/,
        peg$c60 = "[0-9]",
        peg$c61 = function(a, b) { return parseInt(a + b.join(''), 10); },
        peg$c62 = /^[ \n\r\t\f]/,
        peg$c63 = "[ \\n\\r\\t\\f]",
        peg$c64 = "/*",
        peg$c65 = "\"/*\"",
        peg$c66 = "*/",
        peg$c67 = "\"*/\"",
        peg$c68 = "any character",
        peg$c69 = "//",
        peg$c70 = "\"//\"",
        peg$c71 = "\n",
        peg$c72 = "\"\\n\"",

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$cleanupExpected(expected) {
      var i = 0;

      expected.sort();

      while (i < expected.length) {
        if (expected[i - 1] === expected[i]) {
          expected.splice(i, 1);
        } else {
          i++;
        }
      }
    }

    function peg$parsemain() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== null) {
        s2 = peg$parsetop_level();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c1(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetop_level() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsepacking();
      if (s1 === null) {
        s1 = peg$c2;
      }
      if (s1 !== null) {
        s2 = peg$parseendian();
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c3) {
            s3 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c4); }
          }
          if (s3 !== null) {
            s4 = peg$parse_();
            if (s4 !== null) {
              s5 = peg$parseunion_set();
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c5(s1,s2,s5);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parsepacking();
        if (s1 === null) {
          s1 = peg$c2;
        }
        if (s1 !== null) {
          s2 = peg$parseendian();
          if (s2 === null) {
            s2 = peg$c2;
          }
          if (s2 !== null) {
            s3 = peg$parsestruct_set();
            if (s3 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c5(s1,s2,s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsepacking() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c6) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c8();
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c9) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s1 !== null) {
          s2 = peg$parse_();
          if (s2 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c11();
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseendian() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c12) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c14();
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c15) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s1 !== null) {
          s2 = peg$parse_();
          if (s2 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c17();
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsestruct_set() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c18;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parsesized();
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$parsesized();
          }
          if (s3 !== null) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c21;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s4 !== null) {
              s5 = peg$parse_();
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c23(s3);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseunion_set() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c18;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parsesized();
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$parsesized();
          }
          if (s3 !== null) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c21;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s4 !== null) {
              s5 = peg$parse_();
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c24(s3);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefield() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseendian();
      if (s1 === null) {
        s1 = peg$c2;
      }
      if (s1 !== null) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c25) {
          s2 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
        if (s2 !== null) {
          s3 = peg$parse_();
          if (s3 !== null) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c27;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c28); }
            }
            if (s4 !== null) {
              s5 = peg$parse_();
              if (s5 !== null) {
                s6 = peg$parseinteger();
                if (s6 !== null) {
                  s7 = peg$parseidentifier();
                  if (s7 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c29(s1,s6,s7);
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parseendian();
        if (s1 === null) {
          s1 = peg$c2;
        }
        if (s1 !== null) {
          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c30) {
            s2 = input.substr(peg$currPos, 8);
            peg$currPos += 8;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s2 !== null) {
            s3 = peg$parse_();
            if (s3 !== null) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s4 = peg$c27;
                peg$currPos++;
              } else {
                s4 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c28); }
              }
              if (s4 !== null) {
                s5 = peg$parse_();
                if (s5 !== null) {
                  s6 = peg$parseinteger();
                  if (s6 !== null) {
                    s7 = peg$parseidentifier();
                    if (s7 !== null) {
                      peg$reportedPos = s0;
                      s1 = peg$c32(s1,s6,s7);
                      if (s1 === null) {
                        peg$currPos = s0;
                        s0 = s1;
                      } else {
                        s0 = s1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          s1 = peg$parseendian();
          if (s1 === null) {
            s1 = peg$c2;
          }
          if (s1 !== null) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c33) {
              s2 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s2 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s2 !== null) {
              s3 = peg$parse_();
              if (s3 !== null) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s4 = peg$c27;
                  peg$currPos++;
                } else {
                  s4 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c28); }
                }
                if (s4 !== null) {
                  s5 = peg$parse_();
                  if (s5 !== null) {
                    s6 = peg$parseinteger();
                    if (s6 !== null) {
                      s7 = peg$parseidentifier();
                      if (s7 !== null) {
                        peg$reportedPos = s0;
                        s1 = peg$c35(s1,s6,s7);
                        if (s1 === null) {
                          peg$currPos = s0;
                          s0 = s1;
                        } else {
                          s0 = s1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c36) {
              s1 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s1 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c37); }
            }
            if (s1 !== null) {
              s2 = peg$parse_();
              if (s2 !== null) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s3 = peg$c27;
                  peg$currPos++;
                } else {
                  s3 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c28); }
                }
                if (s3 !== null) {
                  s4 = peg$parse_();
                  if (s4 !== null) {
                    s5 = peg$parseinteger();
                    if (s5 !== null) {
                      s6 = peg$parseidentifier();
                      if (s6 === null) {
                        s6 = peg$c2;
                      }
                      if (s6 !== null) {
                        peg$reportedPos = s0;
                        s1 = peg$c38(s5);
                        if (s1 === null) {
                          peg$currPos = s0;
                          s0 = s1;
                        } else {
                          s0 = s1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === null) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c3) {
                s1 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
              } else {
                s1 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c4); }
              }
              if (s1 !== null) {
                s2 = peg$parse_();
                if (s2 !== null) {
                  s3 = peg$parseidentifier();
                  if (s3 !== null) {
                    s4 = peg$parseunion_set();
                    if (s4 !== null) {
                      peg$reportedPos = s0;
                      s1 = peg$c39(s3,s4);
                      if (s1 === null) {
                        peg$currPos = s0;
                        s0 = s1;
                      } else {
                        s0 = s1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === null) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c40) {
                  s1 = input.substr(peg$currPos, 6);
                  peg$currPos += 6;
                } else {
                  s1 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c41); }
                }
                if (s1 !== null) {
                  s2 = peg$parse_();
                  if (s2 !== null) {
                    s3 = peg$parseidentifier();
                    if (s3 !== null) {
                      s4 = peg$parsestruct_set();
                      if (s4 !== null) {
                        peg$reportedPos = s0;
                        s1 = peg$c42(s3,s4);
                        if (s1 === null) {
                          peg$currPos = s0;
                          s0 = s1;
                        } else {
                          s0 = s1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesized() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsefield();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s4 = peg$c43;
          peg$currPos++;
        } else {
          s4 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c44); }
        }
        if (s4 !== null) {
          s5 = peg$parse_();
          if (s5 !== null) {
            s6 = peg$parseinteger();
            if (s6 !== null) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s7 = peg$c45;
                peg$currPos++;
              } else {
                s7 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c46); }
              }
              if (s7 !== null) {
                s8 = peg$parse_();
                if (s8 !== null) {
                  peg$reportedPos = s3;
                  s4 = peg$c47(s1,s6);
                  if (s4 === null) {
                    peg$currPos = s3;
                    s3 = s4;
                  } else {
                    s3 = s4;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s4 = peg$c43;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c44); }
            }
            if (s4 !== null) {
              s5 = peg$parse_();
              if (s5 !== null) {
                s6 = peg$parseinteger();
                if (s6 !== null) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s7 = peg$c45;
                    peg$currPos++;
                  } else {
                    s7 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c46); }
                  }
                  if (s7 !== null) {
                    s8 = peg$parse_();
                    if (s8 !== null) {
                      peg$reportedPos = s3;
                      s4 = peg$c47(s1,s6);
                      if (s4 === null) {
                        peg$currPos = s3;
                        s3 = s4;
                      } else {
                        s3 = s4;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 59) {
            s4 = peg$c48;
            peg$currPos++;
          } else {
            s4 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
          if (s4 !== null) {
            s5 = peg$parse_();
            if (s5 !== null) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === null) {
            s3 = peg$c2;
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c50(s1,s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parsefield();
        if (s1 !== null) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 59) {
            s3 = peg$c48;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
          if (s3 !== null) {
            s4 = peg$parse_();
            if (s4 !== null) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === null) {
            s2 = peg$c2;
          }
          if (s2 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c51(s1);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseidentifier() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c52.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s1 !== null) {
        s2 = [];
        if (peg$c54.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        while (s3 !== null) {
          s2.push(s3);
          if (peg$c54.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
        }
        if (s2 !== null) {
          s3 = peg$parse_();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c56(s1,s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c57.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }
      if (s1 !== null) {
        s2 = [];
        if (peg$c59.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
        while (s3 !== null) {
          s2.push(s3);
          if (peg$c59.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c60); }
          }
        }
        if (s2 !== null) {
          s3 = peg$parse_();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c61(s1,s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsews();
      while (s1 !== null) {
        s0.push(s1);
        s1 = peg$parsews();
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1, s2, s3, s4, s5;

      if (peg$c62.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c64) {
          s1 = peg$c64;
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s1 !== null) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c66) {
            s5 = peg$c66;
            peg$currPos += 2;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c67); }
          }
          peg$silentFails--;
          if (s5 === null) {
            s4 = peg$c2;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== null) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c68); }
            }
            if (s5 !== null) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== null) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 2) === peg$c66) {
              s5 = peg$c66;
              peg$currPos += 2;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
            peg$silentFails--;
            if (s5 === null) {
              s4 = peg$c2;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== null) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c68); }
              }
              if (s5 !== null) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== null) {
            if (input.substr(peg$currPos, 2) === peg$c66) {
              s3 = peg$c66;
              peg$currPos += 2;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
            if (s3 !== null) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c69) {
            s1 = peg$c69;
            peg$currPos += 2;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
          if (s1 !== null) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 10) {
              s5 = peg$c71;
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
            peg$silentFails--;
            if (s5 === null) {
              s4 = peg$c2;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== null) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c68); }
              }
              if (s5 !== null) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            while (s3 !== null) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 10) {
                s5 = peg$c71;
                peg$currPos++;
              } else {
                s5 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c72); }
              }
              peg$silentFails--;
              if (s5 === null) {
                s4 = peg$c2;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
              if (s4 !== null) {
                if (input.length > peg$currPos) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c68); }
                }
                if (s5 !== null) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            }
            if (s2 !== null) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== null && peg$currPos === input.length) {
      return peg$result;
    } else {
      peg$cleanupExpected(peg$maxFailExpected);
      peg$reportedPos = Math.max(peg$currPos, peg$maxFailPos);

      throw new SyntaxError(
        peg$maxFailExpected,
        peg$reportedPos < input.length ? input.charAt(peg$reportedPos) : null,
        peg$reportedPos,
        peg$computePosDetails(peg$reportedPos).line,
        peg$computePosDetails(peg$reportedPos).column
      );
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse      : parse
  };
})()